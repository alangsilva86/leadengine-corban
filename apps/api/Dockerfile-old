# Stage 1: install dependencies and build everything
FROM node:18-alpine AS build

WORKDIR /app

RUN apk add --no-cache git openssl

# Workspace manifests
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./
COPY tsconfig.json ./
COPY tsconfig.base.json ./

# Source code
COPY packages ./packages
COPY apps/api ./apps/api

# Install pnpm and workspace dependencies
RUN npm install -g pnpm \
 && pnpm install --frozen-lockfile

# Build all packages (tsup / tsc outputs)
RUN pnpm -r build

# Stage 2: create a portable deployment for the API
FROM build AS deploy
RUN pnpm --filter ./apps/api --prod deploy /app/deploy

WORKDIR /app/deploy

# Stage 3: runtime image
FROM node:18-alpine AS runtime

WORKDIR /app
ENV NODE_ENV=production
RUN apk add --no-cache openssl

# Copy the deployable artifact
COPY --from=deploy /app/deploy ./

# Ensure non-root user runs the service
RUN addgroup -g 1001 -S nodejs \
  && adduser -S ticketz -u 1001 \
  && chown -R ticketz:nodejs /app

USER ticketz

EXPOSE 4003

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4003/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

CMD ["node", "dist/server.js"]
