// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// Core Models
// ============================================================================

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  isActive  Boolean  @default(true)
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  contacts  Contact[]
  tickets   Ticket[]
  leads     Lead[]
  campaigns Campaign[]
  queues    Queue[]

  @@map("tenants")
}

model User {
  id           String    @id @default(cuid())
  tenantId     String
  name         String
  email        String
  phone        String?
  avatar       String?
  role         UserRole  @default(AGENT)
  isActive     Boolean   @default(true)
  passwordHash String
  settings     Json      @default("{}")
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedTickets  Ticket[]  @relation("TicketAssignee")
  sentMessages     Message[] @relation("MessageSender")
  assignedLeads    Lead[]    @relation("LeadAssignee")
  userQueues       UserQueue[]

  @@unique([tenantId, email])
  @@map("users")
}

model Queue {
  id          String  @id @default(cuid())
  tenantId    String
  name        String
  description String?
  color       String?
  isActive    Boolean @default(true)
  orderIndex  Int     @default(0)
  settings    Json    @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tickets    Ticket[]
  userQueues UserQueue[]

  @@unique([tenantId, name])
  @@map("queues")
}

model UserQueue {
  id       String @id @default(cuid())
  userId   String
  queueId  String
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  queue Queue @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@unique([userId, queueId])
  @@map("user_queues")
}

model Contact {
  id                  String    @id @default(cuid())
  tenantId            String
  name                String
  phone               String?
  email               String?
  document            String?
  avatar              String?
  isBlocked           Boolean   @default(false)
  tags                String[]  @default([])
  customFields        Json      @default("{}")
  lastInteractionAt   DateTime?
  notes               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tickets  Ticket[]
  messages Message[]
  leads    Lead[]

  @@unique([tenantId, phone])
  @@unique([tenantId, email])
  @@map("contacts")
}

model Ticket {
  id                   String        @id @default(cuid())
  tenantId             String
  contactId            String
  queueId              String
  userId               String?
  status               TicketStatus  @default(OPEN)
  priority             TicketPriority @default(NORMAL)
  subject              String?
  channel              ChannelType
  lastMessageAt        DateTime?
  lastMessagePreview   String?
  tags                 String[]      @default([])
  metadata             Json          @default("{}")
  closedAt             DateTime?
  closedBy             String?
  closeReason          String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contact  Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  queue    Queue     @relation(fields: [queueId], references: [id], onDelete: Cascade)
  assignee User?     @relation("TicketAssignee", fields: [userId], references: [id], onDelete: SetNull)
  messages Message[]

  @@map("tickets")
}

model Message {
  id               String          @id @default(cuid())
  tenantId         String
  ticketId         String
  contactId        String
  userId           String?
  instanceId       String?
  direction        MessageDirection
  type             MessageType     @default(TEXT)
  content          String
  caption          String?
  mediaUrl         String?
  mediaFileName    String?
  mediaType        String?
  mediaSize        Int?
  status           MessageStatus   @default(PENDING)
  externalId       String?
  quotedMessageId  String?
  metadata         Json            @default("{}")
  idempotencyKey   String?
  deliveredAt      DateTime?
  readAt           DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  ticket        Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  contact       Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  sender        User?    @relation("MessageSender", fields: [userId], references: [id], onDelete: SetNull)
  quotedMessage Message? @relation("MessageQuote", fields: [quotedMessageId], references: [id])
  quotes        Message[] @relation("MessageQuote")

  @@unique([tenantId, externalId], map: "messages_tenant_external_id_unique")
  @@unique([tenantId, idempotencyKey], map: "messages_tenant_idempotency_key_unique")
  @@index([instanceId, createdAt], map: "messages_instance_created_idx")
  @@index([ticketId, createdAt], map: "messages_ticket_created_idx")
  @@map("messages")
}

model Lead {
  id                 String      @id @default(cuid())
  tenantId           String
  contactId          String
  campaignId         String?
  userId             String?
  status             LeadStatus  @default(NEW)
  source             LeadSource
  score              Json?
  value              Float?
  probability        Int?
  expectedCloseDate  DateTime?
  actualCloseDate    DateTime?
  lostReason         String?
  tags               String[]    @default([])
  customFields       Json        @default("{}")
  lastContactAt      DateTime?
  nextFollowUpAt     DateTime?
  notes              String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // Relations
  tenant     Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contact    Contact       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  campaign   Campaign?     @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  assignee   User?         @relation("LeadAssignee", fields: [userId], references: [id], onDelete: SetNull)
  activities LeadActivity[]

  @@map("leads")
  @@unique([tenantId, contactId], map: "leads_tenant_contact_unique")
}

model Campaign {
  id                 String   @id @default(cuid())
  tenantId           String
  name               String
  agreementId        String
  agreementName      String?
  whatsappInstanceId String?
  status             String   @default("draft")
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  metadata           Json?

  // Relations
  tenant           Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  leads            Lead[]
  whatsappInstance WhatsAppInstance? @relation(fields: [whatsappInstanceId], references: [id])
  allocations      LeadAllocation[]

  @@index([tenantId, status])
  @@index([tenantId, agreementId])
  @@unique([tenantId, agreementId, whatsappInstanceId], map: "campaigns_tenant_agreement_instance_unique")
  @@map("campaigns")
}

model BrokerLead {
  id           String   @id @default(cuid())
  tenantId     String
  agreementId  String
  fullName     String
  document     String
  matricula    String?
  phone        String?
  registrations String[] @default([])
  tags         String[] @default([])
  margin       Float?
  netMargin    Float?
  score        Float?
  raw          Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  allocations LeadAllocation[]

  @@unique([tenantId, document], map: "broker_leads_tenant_document_unique")
  @@map("broker_leads")
}

enum LeadAllocationStatus {
  allocated
  contacted
  won
  lost
}

model LeadAllocation {
  id         String              @id @default(cuid())
  tenantId   String
  campaignId String
  leadId     String
  status     LeadAllocationStatus @default(allocated)
  notes      String?
  payload    Json?
  receivedAt DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  lead     BrokerLead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  campaign Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([tenantId, leadId, campaignId], map: "lead_allocations_unique_key")
  @@index([tenantId, campaignId, status], map: "lead_allocations_status_idx")
  @@map("lead_allocations")
}

model LeadActivity {
  id          String           @id @default(cuid())
  tenantId    String
  leadId      String
  userId      String?
  type        LeadActivityType
  title       String
  description String?
  metadata    Json             @default("{}")
  occurredAt  DateTime
  createdAt   DateTime         @default(now())

  // Relations
  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("lead_activities")
}

model IntegrationState {
  key       String   @id
  value     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("integration_states")
}

model ProcessedIntegrationEvent {
  id        String   @id
  source    String
  cursor    String?
  payload   Json?
  createdAt DateTime @default(now())

  @@index([source, createdAt])
  @@map("processed_integration_events")
}

enum WhatsAppInstanceStatus {
  disconnected
  connecting
  connected
  error
  pending
  failed
}

model WhatsAppInstance {
  id          String                   @id
  tenantId    String
  name        String
  brokerId    String
  phoneNumber String?
  status      WhatsAppInstanceStatus   @default(pending)
  connected   Boolean                  @default(false)
  lastSeenAt  DateTime?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  metadata    Json?

  campaigns   Campaign[]

  @@index([tenantId])
  @@unique([tenantId, id])
  @@unique([brokerId])
  @@map("whatsapp_instances")
}

// ============================================================================
// Enums
// ============================================================================

enum UserRole {
  ADMIN
  SUPERVISOR
  AGENT
}

enum TicketStatus {
  OPEN
  PENDING
  ASSIGNED
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ChannelType {
  WHATSAPP
  EMAIL
  SMS
  VOICE
  CHAT
  SOCIAL
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
  LOCATION
  CONTACT
  STICKER
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum LeadStatus {
  NEW
  CONTACTED
  ENGAGED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED
  LOST
  NURTURING
}

enum LeadSource {
  ORGANIC
  PAID_ADS
  SOCIAL_MEDIA
  EMAIL
  REFERRAL
  WHATSAPP
  WEBSITE
  PHONE
  EVENT
  PARTNER
  IMPORT
  OTHER
}

enum LeadActivityType {
  CREATED
  STATUS_CHANGED
  CONTACTED
  EMAIL_SENT
  EMAIL_OPENED
  EMAIL_CLICKED
  WHATSAPP_SENT
  WHATSAPP_REPLIED
  CALL_MADE
  CALL_ANSWERED
  MEETING_SCHEDULED
  MEETING_COMPLETED
  PROPOSAL_SENT
  PROPOSAL_VIEWED
  CONTRACT_SIGNED
  NOTE_ADDED
  SCORE_UPDATED
  ASSIGNED
  CONVERTED
  LOST
}
